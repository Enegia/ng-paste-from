{"version":3,"sources":["ng-paste-from.coffee","ng-paste-from.js"],"names":[],"mappings":"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","file":"ng-paste-from-latest.js","sourcesContent":["angular.module \"ngPasteFrom\", []\n\t.constant \"ngPasteFromErrors\",\n\t\tinvalidColumnLength: \"NGPASTEFROM_INVALID_COLUMN_LENGTH\"\n\t\tfailedValidation: \"NGPASTEFROM_FAILED_VALIDATION\"\n\n\t.constant \"ngPasteFromSeparators\",\n\t\trow: /\\r\\n|\\n\\r|\\n|\\r/g\n\t\tcolumn: \"\\t\"\n\n\t.directive \"ngPasteFrom\", ->\n\t\trestrict: \"A\"\n\t\tscope: \n\t\t\tngPasteFrom: \"=\"\n\t\t\tngPasteFromColumns: \"=\"\n\t\t\tngPasteFromEnforceColumnCount: \"=\"\n\t\t\tngPasteFromRowSeparator: \"=\"\n\t\t\tngPasteFromColumnSeparator: \"=\"\n\t\t\tngPasteFromPasteOnly: \"=\"\n\t\t\tngPasteFromBeforeParse: \"=\"\n\t\t\tngPasteFromAfterParseRow: \"=\"\n\t\t\tngPasteFromOnValidate: \"=\"\n\t\t\tngPasteFromBeforeApply: \"=\"\n\t\t\tngPasteFromOnError: \"=\"\n\n\t\tlink: ($scope, element, attrs) ->\n\t\t\tif not $scope.ngPasteFromColumns?\n\t\t\t\tconsole.error \"Missing required attribute ngPasteFromColumns.\"\n\n\t\t\t$scope.pasteEvent = (event) ->\n\t\t\t\tif event.clipboardData? && event.clipboardData.getData? # Standard\n\t\t\t\t\tdata = event.clipboardData.getData \"text/plain\"\n\t\t\t\telse if event.originalEvent? && event.originalEvent.clipboardData? && event.originalEvent.clipboardData.getData? # jQuery\n\t\t\t\t\tdata = event.originalEvent.clipboardData.getData \"text/plain\"\n\t\t\t\telse if window.clipboardData? && window.clipboardData.getData? # Internet Explorer\n\t\t\t\t\tdata = window.clipboardData.getData \"Text\"\n\n\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t$scope.processPasteData data\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\tevent.preventDefault()\n\n\t\t\t$scope.changeEvent = ->\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\telement.val \"\"\n\t\t\t\telse\n\t\t\t\t\tdata = element.val()\n\t\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t\t$scope.processPasteData data\n\n\t\t\telement.on \"paste\", $scope.pasteEvent\n\t\t\telement.on \"keyup\", $scope.changeEvent\n\t\t\telement.on \"change\", $scope.changeEvent\n\n\t\tcontroller: ($scope, $filter, ngPasteFromErrors, ngPasteFromSeparators) ->\n\t\t\t$scope.columnsToObject = (columns) ->\n\t\t\t\tobj = {}\n\t\t\t\tformat = $scope.ngPasteFromColumns\n\t\t\t\tfor column, index in columns\n\t\t\t\t\tobj[format[index]] = column\n\t\t\t\tobj\n\n\t\t\t$scope.getExpectedColumnsLength = ->\n\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t$scope.ngPasteFromColumns\n\t\t\t\telse\n\t\t\t\t\t$scope.ngPasteFromColumns.length\n\n\t\t\t$scope.processPasteData = (data) ->\n\t\t\t\tif not (data and data.length)\n\t\t\t\t\treturn\n\n\t\t\t\trows = data.split $scope.ngPasteFromRowSeparator ? ngPasteFromSeparators.row\n\t\t\t\tresult = []\n\t\t\t\texpectedColumnsLength = $scope.getExpectedColumnsLength()\n\n\t\t\t\tfor row, index in rows\n\t\t\t\t\tif row is \"\"\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tcolumns = row.split $scope.ngPasteFromColumnSeparator ? ngPasteFromSeparators.column\n\n\t\t\t\t\trowData =\n\t\t\t\t\t\tindex: index\n\t\t\t\t\t\tsource: row\n\t\t\t\t\t\texpectedLength: expectedColumnsLength\n\t\t\t\t\t\tactualLength: columns.length\n\n\t\t\t\t\tif $scope.ngPasteFromEnforceColumnCount && columns.length isnt expectedColumnsLength\n\t\t\t\t\t\tif typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.invalidColumnLength, rowData\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t\trowResult = columns\n\t\t\t\t\telse\n\t\t\t\t\t\trowResult = $scope.columnsToObject columns\n\n\t\t\t\t\tif typeof $scope.ngPasteFromOnValidate isnt \"function\" or $scope.ngPasteFromOnValidate rowResult, rowData\n\t\t\t\t\t\tif typeof $scope.ngPasteFromAfterParseRow is \"function\"\n\t\t\t\t\t\t\trowResult = $scope.ngPasteFromAfterParseRow rowResult, rowData\n\n\t\t\t\t\t\tresult.push rowResult\n\t\t\t\t\telse if typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.failedValidation, rowData\n\n\t\t\t\tif typeof $scope.ngPasteFromBeforeApply is \"function\"\n\t\t\t\t\t$scope.ngPasteFromBeforeApply result\n\n\t\t\t\t$scope.$apply ->\n\t\t\t\t\t$scope.ngPasteFrom = result\n","(function() {\n  angular.module(\"ngPasteFrom\", []).constant(\"ngPasteFromErrors\", {\n    invalidColumnLength: \"NGPASTEFROM_INVALID_COLUMN_LENGTH\",\n    failedValidation: \"NGPASTEFROM_FAILED_VALIDATION\"\n  }).constant(\"ngPasteFromSeparators\", {\n    row: /\\r\\n|\\n\\r|\\n|\\r/g,\n    column: \"\\t\"\n  }).directive(\"ngPasteFrom\", function() {\n    return {\n      restrict: \"A\",\n      scope: {\n        ngPasteFrom: \"=\",\n        ngPasteFromColumns: \"=\",\n        ngPasteFromEnforceColumnCount: \"=\",\n        ngPasteFromRowSeparator: \"=\",\n        ngPasteFromColumnSeparator: \"=\",\n        ngPasteFromPasteOnly: \"=\",\n        ngPasteFromBeforeParse: \"=\",\n        ngPasteFromAfterParseRow: \"=\",\n        ngPasteFromOnValidate: \"=\",\n        ngPasteFromBeforeApply: \"=\",\n        ngPasteFromOnError: \"=\"\n      },\n      link: function($scope, element, attrs) {\n        if ($scope.ngPasteFromColumns == null) {\n          console.error(\"Missing required attribute ngPasteFromColumns.\");\n        }\n        $scope.pasteEvent = function(event) {\n          var data, ref;\n          if ((event.clipboardData != null) && (event.clipboardData.getData != null)) {\n            data = event.clipboardData.getData(\"text/plain\");\n          } else if ((event.originalEvent != null) && (event.originalEvent.clipboardData != null) && (event.originalEvent.clipboardData.getData != null)) {\n            data = event.originalEvent.clipboardData.getData(\"text/plain\");\n          } else if ((window.clipboardData != null) && (window.clipboardData.getData != null)) {\n            data = window.clipboardData.getData(\"Text\");\n          }\n          if (typeof $scope.ngPasteFromBeforeParse === \"function\") {\n            data = $scope.ngPasteFromBeforeParse(data);\n          }\n          $scope.processPasteData(data);\n          if ((ref = $scope.ngPasteFromPasteOnly) != null ? ref : true) {\n            return event.preventDefault();\n          }\n        };\n        $scope.changeEvent = function() {\n          var data, ref;\n          if ((ref = $scope.ngPasteFromPasteOnly) != null ? ref : true) {\n            return element.val(\"\");\n          } else {\n            data = element.val();\n            if (typeof $scope.ngPasteFromBeforeParse === \"function\") {\n              data = $scope.ngPasteFromBeforeParse(data);\n            }\n            return $scope.processPasteData(data);\n          }\n        };\n        element.on(\"paste\", $scope.pasteEvent);\n        element.on(\"keyup\", $scope.changeEvent);\n        return element.on(\"change\", $scope.changeEvent);\n      },\n      controller: function($scope, $filter, ngPasteFromErrors, ngPasteFromSeparators) {\n        $scope.columnsToObject = function(columns) {\n          var column, format, i, index, len, obj;\n          obj = {};\n          format = $scope.ngPasteFromColumns;\n          for (index = i = 0, len = columns.length; i < len; index = ++i) {\n            column = columns[index];\n            obj[format[index]] = column;\n          }\n          return obj;\n        };\n        $scope.getExpectedColumnsLength = function() {\n          if (typeof $scope.ngPasteFromColumns === \"number\") {\n            return $scope.ngPasteFromColumns;\n          } else {\n            return $scope.ngPasteFromColumns.length;\n          }\n        };\n        return $scope.processPasteData = function(data) {\n          var columns, expectedColumnsLength, i, index, len, ref, ref1, result, row, rowData, rowResult, rows;\n          if (!(data && data.length)) {\n            return;\n          }\n          rows = data.split((ref = $scope.ngPasteFromRowSeparator) != null ? ref : ngPasteFromSeparators.row);\n          result = [];\n          expectedColumnsLength = $scope.getExpectedColumnsLength();\n          for (index = i = 0, len = rows.length; i < len; index = ++i) {\n            row = rows[index];\n            if (row === \"\") {\n              continue;\n            }\n            columns = row.split((ref1 = $scope.ngPasteFromColumnSeparator) != null ? ref1 : ngPasteFromSeparators.column);\n            rowData = {\n              index: index,\n              source: row,\n              expectedLength: expectedColumnsLength,\n              actualLength: columns.length\n            };\n            if ($scope.ngPasteFromEnforceColumnCount && columns.length !== expectedColumnsLength) {\n              if (typeof $scope.ngPasteFromOnError === \"function\") {\n                $scope.ngPasteFromOnError(ngPasteFromErrors.invalidColumnLength, rowData);\n              }\n              continue;\n            }\n            if (typeof $scope.ngPasteFromColumns === \"number\") {\n              rowResult = columns;\n            } else {\n              rowResult = $scope.columnsToObject(columns);\n            }\n            if (typeof $scope.ngPasteFromOnValidate !== \"function\" || $scope.ngPasteFromOnValidate(rowResult, rowData)) {\n              if (typeof $scope.ngPasteFromAfterParseRow === \"function\") {\n                rowResult = $scope.ngPasteFromAfterParseRow(rowResult, rowData);\n              }\n              result.push(rowResult);\n            } else if (typeof $scope.ngPasteFromOnError === \"function\") {\n              $scope.ngPasteFromOnError(ngPasteFromErrors.failedValidation, rowData);\n            }\n          }\n          if (typeof $scope.ngPasteFromBeforeApply === \"function\") {\n            $scope.ngPasteFromBeforeApply(result);\n          }\n          return $scope.$apply(function() {\n            return $scope.ngPasteFrom = result;\n          });\n        };\n      }\n    };\n  });\n\n}).call(this);\n"],"sourceRoot":"/source/"}